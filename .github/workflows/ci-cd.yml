name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            core/package-lock.json
            tests/package-lock.json
            
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install core dependencies
        working-directory: ./core
        run: npm ci
        
      - name: Install test dependencies
        working-directory: ./tests
        run: npm ci
        
      - name: Build core library
        working-directory: ./core
        run: npm run build
        
      - name: Run TypeScript type checking
        working-directory: ./tests
        run: npx tsc --noEmit
        
      - name: Run tests with coverage
        working-directory: ./tests
        run: npm test -- --coverage --ci
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./tests/coverage/lcov.info
          flags: unittests
          name: codecov-openpilot
          fail_ci_if_error: true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/coverage/
          retention-days: 30
          
      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            core/dist/
            core/package.json
          retention-days: 30

  # Job 2: Docker Build and Test
  docker-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          push: false
          tags: openpilot-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run tests in Docker
        run: docker-compose -f docker-compose.test.yml run --rm test-runner
        
      - name: Run coverage in Docker
        run: docker-compose -f docker-compose.test.yml run --rm test-coverage
        
      - name: Extract coverage from Docker
        run: |
          docker create --name coverage-container openpilot-test-runner:latest
          docker cp coverage-container:/app/tests/coverage ./coverage-docker
          docker rm coverage-container
          
      - name: Upload Docker test coverage
        uses: actions/upload-artifact@v4
        with:
          name: docker-coverage
          path: coverage-docker/
          retention-days: 30

  # Job 3: Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        working-directory: ./core
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./core
        run: npx eslint . --ext .ts,.tsx --max-warnings 0 || true
        
      - name: Run Prettier check
        working-directory: ./core
        run: npx prettier --check "src/**/*.{ts,tsx,json}" || true
        
      - name: Check for security vulnerabilities
        run: |
          cd core && npm audit --audit-level=moderate || true
          cd ../tests && npm audit --audit-level=moderate || true

  # Job 4: Build Documentation
  build-docs:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        working-directory: ./core
        run: npm ci
        
      - name: Generate TypeDoc documentation
        working-directory: ./core
        run: |
          npx typedoc --out ../docs/api src/index.ts || echo "TypeDoc generation skipped"
          
      - name: Create documentation site
        run: |
          mkdir -p docs-site
          cp -r docs/* docs-site/ 2>/dev/null || true
          cp README.md docs-site/README.md
          cp tests/TESTING_SYSTEM_GUIDE.md docs-site/TESTING.md
          
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs-site/
          retention-days: 30

  # Job 5: Deploy to GitHub Pages
  deploy-pages:
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docs]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: ./docs-output
          
      - name: Download test coverage
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./docs-output/coverage
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs-output'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job 6: Create Release Artifacts
  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./release
          
      - name: Create Release Archive
        run: |
          cd release
          tar -czf ../openpilot-${{ github.ref_name }}.tar.gz *
          cd ..
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            openpilot-${{ github.ref_name }}.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 7: Auto-Fix Loop (on failure)
  auto-fix:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: failure()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          cd core && npm ci
          cd ../tests && npm ci
          
      - name: Run auto-fix loop
        working-directory: ./tests
        run: |
          python3 autofix.py
          
      - name: Upload auto-fix report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autofix-report
          path: tests/autofix-report.json
          retention-days: 7

  # Job 8: Notification
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-test, code-quality]
    if: always()
    
    steps:
      - name: Send status notification
        run: |
          echo "Build Status: ${{ job.status }}"
          echo "Tests: ${{ needs.build-and-test.result }}"
          echo "Docker: ${{ needs.docker-test.result }}"
          echo "Quality: ${{ needs.code-quality.result }}"
